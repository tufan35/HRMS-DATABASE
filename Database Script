
CREATE OR REPLACE FUNCTION validateEmailByDomain(INTEGER, CHARACTER VARYING(255)) 
RETURNS BOOLEAN AS $$
DECLARE
	DECLARE userEmailaAddress varchar(320);
	DECLARE webAddress varchar(255);
    DECLARE result boolean;
BEGIN
	SELECT email_address INTO userEmailaAddress FROM users where id = $1;
    SELECT SUBSTRING(userEmailaAddress,POSITION('@' in userEmailaAddress) + 1) = $2 INTO result;
	IF result = false THEN
		raise 'Email adresi ile domain adresi uyuşması gerekir.';
	END IF;
	RETURN result;
END; $$ LANGUAGE plpgsql;

*******************************************


create table users(

id integer not null generated by default as identity(increment 1 start 1 MINVALUE 1 MAXVALUE 6546832 cache 1),
email_address CHARACTER VARYING(320) NOT NULL,
	password CHARACTER VARYING(25) NOT NULL,
	CONSTRAINT pk_users PRIMARY KEY (id),
	CONSTRAINT uc_users_email_address UNIQUE (email_address)
);

CREATE TABLE public.candidates(
	id INTEGER NOT NULL,
	firstName CHARACTER NOT NULL,
	lastName CHARACTER  NOT NULL,
	identification_number CHARACTER VARYING(11) NOT NULL,
    birthDate DATE NOT NULL,
	CONSTRAINT pk_candidates PRIMARY KEY (id),
	CONSTRAINT fk_candidates_users FOREIGN KEY (id) REFERENCES public.users (id) ON DELETE CASCADE,
	CONSTRAINT uc_candidates_identification_number UNIQUE (identification_number)
);


create table employers(
id int not null,
companyName CHARACTER VARYING(255) not null,
webAddress  CHARACTER VARYING(255) not null,
	CONSTRAINT pk_employers PRIMARY KEY (id),
	CONSTRAINT fk_employers_users FOREIGN KEY (id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT chk_employers_web_address CHECK (validateEmailByDomain(id,webAddress))
	

)

create TABLE verificationCode(
id int not null generated by default as identity (INCREMENT 1 start 1 MINVALUE 1 MAXVALUE 6431682 cache 1),
	code CHARACTER VARYING(35) not null ,
	isVerified boolean default false not null,
	CONSTRAINT pk_verificationCode PRIMARY KEY (id),
	CONSTRAINT uc_verificationCode_Uniq UNIQUE(code)

)



create table verificationCodeCandidates (
	id INTEGER not null,
	candidateId int not null,
	constraint pk_verificationCodeCandidates primary key (id),
	constraint fk_verificationCodeCandidates_verificationCode foreign key (id) REFERENCES verificationCode(id) on delete cascade,
	constraint fk_verificationCodeCandidates foreign key (candidateId) REFERENCES candidates(id) on delete cascade
	

)

create table verificationCodeEmployers (
	id INTEGER not null,
	employedId int not null,
	constraint pk_verificationCodeEmployers primary key (id),
	constraint fk_verificationCodeEmployers_verificationCode foreign key (id) REFERENCES verificationCode(id) on delete cascade,
	constraint fk_verificationCodeEmployers foreign key (employedId) REFERENCES employers(id) on delete cascade

)


create table employees(
	id INTEGER NOT NULL,
	firstName CHARACTER VARYING(35) NOT NULL,
	lastName CHARACTER VARYING(35) NOT NULL,
	CONSTRAINT pk_employees PRIMARY KEY (id),
	CONSTRAINT fk_employees_users FOREIGN KEY (id) REFERENCES users (id) ON DELETE CASCADE
)


create table employeeConfirm(
	id integer not null generated by default as identity(increment 1 start 1 minvalue 1 maxvalue 85746854 cache 1) ,
	employeesId int not null,
	isConfirmed boolean default false not null,
	constraint pk_employeeConfirms primary key(id),
	constraint fk_employeeConfirms_employeesId foreign key(employeesId) REFERENCES employees (id) on delete cascade
	
)

create table employeesConfirmEmployers(
	id int not null,
	employerId int not null,
	constraint pk_employeesConfirmEmployers primary key(id),
	constraint fk_employeesConfirmEmployers_employeeConfirm FOREIGN key(id) references employeeConfirm(id) on delete cascade ,
	constraint fk_employeesConfirmEmployers_employerId FOREIGN key(id) references employers(id) on delete cascade
)


create table jobs(
	id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
	jobsname character VARYING(255) not null,
	constraint pk_jobsnameid primary key(id),
	constraint uk_jobsname UNIQUE  (jobsname)
)

